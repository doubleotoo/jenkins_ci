#  $ ruby cached_objects.rb 
#  Foo::initialize: name=foo, age=13
#  #<Foo:0x0000010086c210>
#  #<Foo:0x0000010086c210>

class Foo
  class << self
    private :new, :allocate
    attr_reader :cache
  end
  @cache = {}

  def self.create(name, age)
    key = generate_cache_key(name, age)

    @cache[key] ||= new(name, age)
  end

  # +*args+ is an array of String objects.
  #
  #     We could call "args.join" first to convert "*args"
  #     into a String, but then we wouldn't be able to
  #     sort properly.
  #
  #     For example:
  #
  #       Foo.generate_cache_key('Bob', 13.to_s, 'Jill')
  #
  #       args.join => 'Bob13Jill'
  #           .sort => '13BJbillo'
  #
  #       -versus-
  #
  #       args.sort => [13, 'Bob', 'Jill]
  #           .join => '13BobJill'
  #
  def self.generate_cache_key(*args)
    # TODO: add optional validation? could be expensive!
    args.sort.join.hash
  end

  def initialize(name, age)
    puts "Foo::initialize: name=#{name}, age=#{age}"
    @name = name
    @age  = age
  end
end

puts Foo.create('foo', 13)
puts Foo.create('foo', 13)

